name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

# Set permissions for GitHub token
permissions:
  contents: read
  checks: write
  pull-requests: write

# Define environment variables
env:
  GO_VERSION: '1.22'
  NODE_VERSION: '18'
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  # Lint Go and TypeScript code
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper linting

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Install golangci-lint
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          golangci-lint --version

      # Run Go linting
      - name: Lint Go code
        run: golangci-lint run ./...

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Install TypeScript dependencies
      - name: Install TypeScript dependencies
        run: npm ci

      # Run TypeScript linting
      - name: Lint TypeScript code
        run: npm run lint || echo "Linting failed but continuing"

  # Run unit tests for Go code
  go-unit-tests:
    name: Go Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Run Go unit tests
      - name: Run Go unit tests
        run: go test -v -race -coverprofile=coverage.out ./test/unit/...

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: go-unit
          fail_ci_if_error: false

      # Generate test report
      - name: Generate Go test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Go Unit Tests
          path: '*.out'
          reporter: go-test

  # Run Go mutation tests
  go-mutation-tests:
    name: Go Mutation Tests
    runs-on: ubuntu-latest
    needs: go-unit-tests
    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Install go-mutesting
      - name: Install go-mutesting
        run: |
          go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest
          go-mutesting --version

      # Run mutation tests on a subset of packages
      - name: Run Go mutation tests
        run: |
          mkdir -p reports
          go-mutesting ./internal/models ./internal/service/resources | tee reports/go-mutation-report.txt
          echo "Mutation score: $(grep -oP 'The mutation score is \K[0-9.]+' reports/go-mutation-report.txt || echo 'N/A')%"

      # Upload mutation test report as artifact
      - name: Upload mutation test report
        uses: actions/upload-artifact@v3
        with:
          name: go-mutation-report
          path: reports/go-mutation-report.txt

  # Run TypeScript unit tests
  ts-unit-tests:
    name: TypeScript Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run TypeScript unit tests
      - name: Run TypeScript unit tests
        run: npm test -- --testPathIgnorePatterns=integration

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: ts-unit
          fail_ci_if_error: false

      # Generate test report
      - name: Generate TypeScript test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: TypeScript Unit Tests
          path: 'junit.xml'
          reporter: jest-junit

  # Run TypeScript mutation tests
  ts-mutation-tests:
    name: TypeScript Mutation Tests
    runs-on: ubuntu-latest
    needs: ts-unit-tests
    steps:
      - uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Install Stryker
      - name: Install Stryker
        run: npm install --no-save @stryker-mutator/core @stryker-mutator/jest-runner

      # Create Stryker config
      - name: Create Stryker config
        run: |
          cat > stryker.conf.json << EOL
          {
            "packageManager": "npm",
            "reporters": ["html", "clear-text", "progress", "json"],
            "testRunner": "jest",
            "coverageAnalysis": "perTest",
            "jest": {
              "projectType": "custom",
              "configFile": "jest.config.js",
              "enableFindRelatedTests": true
            },
            "mutate": [
              "src/**/*.ts",
              "!src/**/*.test.ts",
              "!src/test-utils/**"
            ]
          }
          EOL

      # Run Stryker mutation tests on a subset of files
      - name: Run TypeScript mutation tests
        run: npx stryker run --mutate 'src/mcp_tools/**/*.ts'

      # Upload mutation test report as artifact
      - name: Upload mutation test report
        uses: actions/upload-artifact@v3
        with:
          name: stryker-report
          path: reports/mutation/

  # Run Go integration tests
  go-integration-tests:
    name: Go Integration Tests
    runs-on: ubuntu-latest
    needs: [go-unit-tests, ts-unit-tests]
    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Run Go integration tests
      - name: Run Go integration tests
        run: go test -v -race -coverprofile=integration-coverage.out ./test/integration/...

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./integration-coverage.out
          flags: go-integration
          fail_ci_if_error: false

      # Generate test report
      - name: Generate Go integration test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Go Integration Tests
          path: '*.out'
          reporter: go-test

  # Run end-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [go-integration-tests]
    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Set up containerized MAAS instance for E2E tests
      - name: Set up containerized MAAS
        run: |
          # This is a placeholder for setting up a containerized MAAS instance
          # In a real implementation, you would use Docker to set up a MAAS container
          echo "Setting up containerized MAAS instance for E2E tests"
          # docker run -d --name maas-test -p 5240:5240 maas/maas:latest

      # Build the server
      - name: Build server
        run: go build -v -o server ./cmd/server

      # Run E2E tests
      - name: Run E2E tests
        run: |
          # Start the server in the background
          ./server &
          SERVER_PID=$!
          
          # Wait for the server to start
          sleep 5
          
          # Run E2E tests
          npm run test:e2e || E2E_RESULT=$?
          
          # Kill the server
          kill $SERVER_PID
          
          # Exit with the E2E test result
          exit ${E2E_RESULT:-0}

  # Run performance and load tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Install k6 for load testing
      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xz
          sudo cp k6-v0.47.0-linux-amd64/k6 /usr/local/bin

      # Build the server
      - name: Build server
        run: go build -v -o server ./cmd/server

      # Run performance tests
      - name: Run performance tests
        run: |
          # Start the server in the background
          ./server &
          SERVER_PID=$!
          
          # Wait for the server to start
          sleep 5
          
          # Create a simple k6 script
          cat > performance-test.js << EOL
          import http from 'k6/http';
          import { sleep } from 'k6';
          
          export const options = {
            vus: 10,
            duration: '30s',
            thresholds: {
              http_req_duration: ['p(95)<500'],
            },
          };
          
          export default function () {
            http.get('http://localhost:8080/api/health');
            sleep(1);
          }
          EOL
          
          # Run k6 load test
          k6 run --summary-export=performance-results.json performance-test.js
          
          # Kill the server
          kill $SERVER_PID

      # Upload performance test results as artifact
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # Build and publish
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [go-unit-tests, ts-unit-tests, go-integration-tests, e2e-tests, performance-tests]
    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Build Go server
      - name: Build Go server
        run: go build -v -o server ./cmd/server

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Install TypeScript dependencies
      - name: Install TypeScript dependencies
        run: npm ci

      # Build TypeScript code
      - name: Build TypeScript code
        run: npm run build

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            server
            dist/

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, go-unit-tests, ts-unit-tests, go-integration-tests, e2e-tests, performance-tests, build]
    if: failure()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: 'CI pipeline failed! :x:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}