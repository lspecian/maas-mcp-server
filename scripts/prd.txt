# Product Requirements Document: Go-Based MCP Server for Canonical MAAS API

## 1. Overview
This project aims to create a Model Context Protocol (MCP) server using Go that exposes Canonical MAAS (Metal as a Service) API functionality to MCP clients, such as AI agents and automation tools. The server will act as an intelligent intermediary, translating MCP requests into MAAS API actions and formatting MAAS data as context for MCP clients.

## 2. Background
Canonical MAAS is a platform for automating the provisioning and lifecycle management of physical servers and virtual machines. It provides a REST API (v2.0) that allows programmatic control of infrastructure resources. The Model Context Protocol (MCP) is an emerging standard for communication between generative AI applications and enterprise data sources/tools.

## 3. Key Features

### 3.1 MCP Tools for MAAS Operations
- Machine Management:
  - List machines with filtering capabilities
  - Get detailed machine information
  - Get machine power state
  - Allocate machines based on constraints
  - Deploy machines with OS and configuration
  - Release machines back to the pool
- Network Management:
  - List and filter subnets
  - Get subnet details
  - List VLANs within fabrics
- Storage Management:
  - List block devices for machines
- Tag Management:
  - List tags
  - Apply tags to machines
  - Create new tags

### 3.2 Authentication & Security
- Support for MAAS API authentication (OAuth 1.0a)
- Configurable MCP server authentication (API Key, Basic Auth)
- Secure handling of credentials

### 3.3 Robust Error Handling
- Consistent error responses
- Detailed error information
- Appropriate HTTP status codes

### 3.4 Logging & Monitoring
- Request/response logging
- Performance metrics
- Error tracking

## 4. Technical Requirements

### 4.1 Architecture
- Layered architecture:
  - Transport/Handler Layer: HTTP request handling with Gin
  - Service Layer: Business logic for MCP tools
  - MAAS Client Layer: Abstraction over gomaasclient
- Separation of concerns for testability and maintainability

### 4.2 Dependencies
- Go programming language
- Gin web framework
- Canonical's gomaasclient library
- Configuration management (environment variables or config files)

### 4.3 Configuration
- MAAS API URL
- MAAS API Key
- Listen address/port
- Authentication settings
- Logging level

## 5. Implementation Plan

### 5.1 Project Setup
- Initialize Go module
- Set up directory structure
- Add dependencies

### 5.2 MAAS Client Integration
- Create wrapper around gomaasclient
- Implement error handling
- Add methods for core MAAS operations

### 5.3 Service Layer
- Implement business logic for each MCP tool
- Map between MCP and MAAS data structures
- Handle parameter validation and transformation

### 5.4 Transport Layer
- Set up Gin server and routes
- Implement request/response handling
- Add middleware for logging, auth, recovery

### 5.5 Testing
- Unit tests for service layer
- Integration tests with MAAS
- End-to-end tests simulating MCP clients

## 6. Future Enhancements
- Expanded toolset for more MAAS operations
- Asynchronous operations for long-running tasks
- Caching for frequently accessed data
- Event streaming for real-time updates
- Advanced authentication options

## 7. Success Criteria
- All specified MCP tools function correctly
- Robust error handling and logging
- Secure authentication
- Clean, maintainable code structure
- Comprehensive test coverage